is_banner_ad_shown = false
has_local_notification_permission = false
product_name = "Enhance_SKU_One"

function init(self)
    -- Add initialization code here
    -- Remove this function if not needed
    msg.post(".", "acquire_input_focus")
    
    -- Ask for permission to schedule local notifications
    -- It can be done at any point in the application
    
    on_permission_granted = function()  has_local_notification_permission = true end
    on_permission_rejected = function() has_local_notification_permission = false end
    
  	enhance.requestLocalNotificationPermission(on_permission_granted, on_permission_rejected)
	
	-- Set currency callback for offerwalls
	-- It is important to do it in the beginning of the application's logic
	
	enhance.setReceivedCurrencyCallback(on_currency_received)
end

function update(self, dt)
end

-- Helper function to test button clicks

function test_click(action, node_name, callback)
    if gui.pick_node(gui.get_node(node_name), action.x, action.y) then
        if action.pressed then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(0.55, 0.55, 0.6))
        elseif action.released then
		    gui.set_scale(gui.get_node(node_name), vmath.vector3(0.6, 0.6, 0.6))
		    callback()
        end
    end
end

-- Handle button clicks

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		test_click(action, "btn_interstitial", on_show_interstitial_clicked)
		test_click(action, "btn_rewarded", on_show_rewarded_clicked)
		test_click(action, "btn_banner", on_toggle_banner_clicked)
		test_click(action, "btn_offerwall", on_show_offerwall_clicked)
		test_click(action, "btn_specialoffer", on_show_special_offer_clicked)
		test_click(action, "btn_logevent", on_log_custom_event_clicked)
		test_click(action, "btn_enable_local_notification", on_enable_local_notification_clicked)
		test_click(action, "btn_disable_local_notification", on_disable_local_notification_clicked)
		test_click(action, "btn_purchase", on_purchase_clicked)
		test_click(action, "btn_consume", on_consume_clicked)
		test_click(action, "btn_gdpr_opt_in", on_gdpr_opt_in_clicked)
		test_click(action, "btn_gdpr_opt_out", on_gdpr_opt_out_clicked)
		test_click(action, "btn_gdpr_show_dialogs", on_gdpr_show_dialogs_clicked)
	end
end

-- Interstitial Ad

function on_show_interstitial_clicked()
	-- Check whether an interstitial ad is available
	
	if not enhance.isInterstitialReady() then
		write_log("Interstitial ad is not ready")
	else
	-- The ad is ready
		enhance.showInterstitialAd()
		write_log("Showing interstitial ad")
	end
end

-- Rewarded Ad

function on_show_rewarded_clicked()
	-- Check whether a rewarded ad is available
	
	if not enhance.isRewardedAdReady() then
		write_log("Rewarded ad is not ready")
	else
	-- The ad is ready, display it
	
		enhance.showRewardedAd(on_reward_granted, on_reward_declined, on_reward_unavailable)
		write_log("Showing rewarded ad")
	end
end

function on_reward_granted(self, reward_value, reward_type)
	-- Reward is granted (user watched video for example)
	-- You can check reward type:
	
	if reward_type == "REWARDTYPE_ITEM" then
		write_log("Reward granted (item)")
	elseif reward_type == "REWARDTYPE_COINS" then
		write_log("Reward granted (coins), value: " .. reward_value)
	else
		write_log("Unknown reward granted")
	end
end

function on_reward_declined()
	-- Reward is declined (user closed the ad for example)

	write_log("Reward declined")
end

function on_reward_unavailable()
	-- Reward is unavailable (network error for example)

	write_log("Reward unavailable")
end

-- Banner Ad

function on_toggle_banner_clicked()
	-- If any banner is already displayed, hide it
	
	if is_banner_ad_shown then
		is_banner_ad_shown = false
		enhance.hideBannerAd()
		write_log("Hiding banner ad")
		
	-- No banner is shown, check if any is available
	
	elseif not enhance.isBannerAdReady() then
		write_log("Banner ad is not ready")
	else
	-- Banner ad is ready, display it
	
		is_banner_ad_shown = true
		enhance.showBannerAdWithPosition("bottom");
		write_log("Showing banner ad")
		
	-- This will display the ad in the bottom of the screen
	-- You can also change the position to "top"
	end
end

-- Offerwall

function on_show_offerwall_clicked()
	-- Show offerwall if available
	
	if not enhance.isOfferwallReady() then
		write_log("Offerwall is not ready")
	else
		enhance.showOfferwall()
		write_log("Showing offerwall")
	end
end

-- Special Offer

function on_show_special_offer_clicked() 
	-- Show special offer if available
	
	if not enhance.isSpecialOfferReady() then
		write_log("Special offer is not ready")
	else
		enhance.showSpecialOffer()
		write_log("Showing special offer")
	end
end

-- Analytics

function on_log_custom_event_clicked()
	-- Send a custom event to analytics network (e.g. Google Analytics)
	
	-- Simple event:
	enhance.logEvent("event_type")
	-- Event with an additional parameter
	enhance.logEvent("event_type", "event_param_key", "event_param_value")
	
	write_log("Sent analytics event")
end

-- Local Notification

function on_enable_local_notification_clicked()
	-- Enable a new local notification
	-- We need permission for that
	
	if not has_local_notification_permission then
		write_log("Permission is not granted")
	else
	-- We have permission
	-- The local notification will appear 5 seconds after the app is deactivated
		enhance.enableLocalNotification("Enhance", "Local Notification!", 5)
		write_log("Enabled local notification")
	end
end

function on_disable_local_notification_clicked()
	-- Cancel any notification
	
	enhance.disableLocalNotification()
	write_log("Disabled local notification")
end

function on_gdpr_opt_in_clicked()
	-- Explicit opt-in
	
	enhance.serviceTermsOptIn()
	write_log("Called explicit opt-in")
end

function on_gdpr_opt_out_clicked()
	-- Explicit opt-out
	
	enhance.serviceTermsOptOut();
	write_log("Called explicit opt-out")
end

function on_gdpr_show_dialogs_clicked()
	-- Show data consent dialogs of all SDKs that provide them
	enhance.requiresDataConsentOptIn(on_service_opt_in_requirement)	
end

function on_service_opt_in_requirement(self, isUserOptInRequired)
	if isUserOptInRequired == 1 then
		enhance.showServiceOptInDialogs(on_dialogs_complete)
	end
end

function on_dialogs_complete()
	write_log("Finished displaying opt-in dialogs")
end

-- Offerwall callback

function on_currency_received(self, amount)
	-- User received a reward from offerwall network
	write_log("Currency received: " .. amount)
end

function on_purchase_clicked()
	-- Attempt purchase
	enhance.attemptPurchase(product_name, on_purchase_success, on_purchase_failed, on_purchase_pending)
end

function on_consume_clicked()
	-- try to consume
	enhance.consume(product_name, on_consume_success, on_consume_failed)
end

function on_purchase_success()
	update_IAP_label()
	write_log("Purchase success")
end

function on_purchase_failed()
	update_IAP_label()
	write_log("Purchase failed")
end

function on_purchase_pending()
	update_IAP_label()
	write_log("Purchase pending")
end

function on_consume_success()
	update_IAP_label()
	write_log("Consume success")
end

function on_consume_failed()
	update_IAP_label()
	write_log("Consume failed")
end

-- Non-enhance logic
-- Write logs to the screen
function write_log(text)
	local text_node = gui.get_node("text_log")
	gui.set_text(text_node, text)
	print(text)
end

function update_IAP_label()
	local title = enhance.getDisplayTitle(product_name, "Default Title")
	local price = enhance.getDisplayPrice(product_name, "Default Price")
	local quantity = enhance.getOwnedItemCount(product_name)
	local isPending = enhance.isProductStatusPending(product_name)

	local text_node = gui.get_node("text_label")
	gui.set_text(text_node, title .. " - " .. price .. " - Qty: " .. quantity .. " - isPending: " .. tostring(isPending))
end
